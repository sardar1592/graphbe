"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)

    books: [Book!]! @paginate(defaultCount: 10)
    book(id: ID!): Book @find

    authors: [Author!]! @paginate(defaultCount: 10)
    author(id: ID! @eq): Author @find

}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
}

type Book {

    id:ID!
    title:String!
    description:String!
    type:String!
    price:Int!
    pages:Int
    author:Author @belongsTo
    created_at:DateTime!
    updated_at:DateTime!

}

type Author{

    id:ID!
    name:String!
    email:String!
    phone:String!
    address:String!
    country:String!
    books: [Book!]! @hasMany
    created_at:DateTime!
    updated_at:DateTime!

}

type Mutation {

    createBook(
      title:String!
      description:String!
      type:String!
      price:Int!
      pages:Int
      author_id:Int
    ) : Book @create

    updateBook(

      id:ID!
      title:String!
      description:String!
      type:String!
      price:Int!
      pages:Int
      author_id:Int

    ) : Book @update

    deleteBook(id:ID!) : Book @delete

    createAuthor(

      name:String!
      email:String!
      phone:String!
      address:String!
      country:String!

    ) : Author @create

    updateAuthor(

      id:ID!
      name:String!
      email:String!
      phone:String!
      address:String!
      country:String!

    ) :Author @update

    deleteAuthor(id:ID!) : Author @delete

}